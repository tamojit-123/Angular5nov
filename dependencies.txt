
 the following dependencies are mandatory for running an angular application.
1. Setting up the dependencies in package.json
Core-js: Patches the global object (window) with essential features of ES2015 (ES6). You may substitute it with an alternative polyfill that provides the same core APIs.
Rxjs: Reactive Extensions Library for JavaScript, which includes methods for transforming, composing, and querying streams of data. It is utilized by several parts of the Angular framework, such as the HTTP and Forms modules.
Zone.js: A polyfill for the Zone specification, which has also been proposed for inclusion in the JavaScript language. Zone.js provides the mechanism to hook into asynchronous operations and track outstanding async tasks.
Angular Dependencies:
@angular/core
Critical run-time parts of the framework are needed by every application. It includes all metadata decorators, Component, Directive, dependency injection, and the component life-cycle hooks. It contains core functionality component views, DI, and change detection.
@angular/compiler
Angular’s Template Compiler. It reads your templates and can convert them to code that makes the application run and render. Typically, you don’t interact with the compiler directly; rather, you use it indirectly via platform-browser-dynamic or the offline template compiler.
@angular/common
Provides the commonly needed services, pipes, and directives such as ngIf and ngFor.
@angular/platform-browser-dynamic
Contains implementations for the dynamic bootstrap of the application. Includes providers and a bootstrap method for applications that compile templates on the client (thus, you can skip this module if you use ahead-of-time compilation). Use this package for bootstrapping your application during development

Scripts property is edited to run using webpack dev server. Explain this to the learners.

2. Install typescript compiler and create tsconfig.json using the command tsc –init    Edit the tsconfig.json file to have the target as "ESNext" and include lib with "DOM,ESNext" 

3. Add webpack.config.js as given in the demo file and explain the essentials.

4. Add main.ts, index.html, app.module.ts, app.component.ts, polyfills.ts. .gitignore files as given in the demo.

5. Now, execute the app using "npm run build" which will create a dist folder as mentioned in webpack.config.js to deploy the application.

Execute the index.html file generated under dist/my-app folder with a live-server.

The "source" code is the code that we'll write and edit. The "distribution" code (under dist folder) is the minimized and optimized output of our build process that will eventually be loaded in the browser.

Reference Links:
https://medium.com/angular-in-depth/setting-up-angular-from-scratch-1f518c65d8ab#:~:text=We%20will%20start%20by%20setting,the%20code%20for%20bootstrapping%20it.


https://angularfirst.com/angular-build-with-webpack-from-scratch/
http://angularfirst.com/angular-build-with-webpack-from-scratch-part-2/
https://v2.angular.io/docs/ts/latest/guide/webpack.html#!#development-configuration


Decorators are a stage 2 proposal for JavaScript. That means decorators will be part of JavaScript in a future release.
Decorators are available as an experimental feature of TypeScript.
To enable decorators, we must enable the experimentalDecorators compiler option either on the command line or in your tsconfig.json.
Class decorators
This tutorial shows the use of Class decorators.
If a decorator expression has the arguments e.g. @expression("a", 3) then these arguments are passed to the decorator function expression(arg1: string, arg2: number).
If a decorator expression has no arguments e.g. @expression then the constructor function of the class is passed to the decorator function expression(theConstructor: Function)
In both above cases the decorator expression can return a new constructor function to replace or override the original constructor function.
5:21
https://www.logicbig.com/tutorials/misc/typescript/class-decorators.html

https://www.telerik.com/blogs/decorators-in-javascript

To run any typescript with decorator do following :
First, create an empty folder:
Next, initialize npm project by running npm init -y in the root dir of your empty project: (-y flag means that you are answering yes to all npm questions)
Next, we will need to add typescript npm package to our dev dependencies:
npm add typescript -D
Next, we will need to add tsconfig.json file by running npx tsc — init in the root of our project:
  {
     "compilerOptions": {
       "target": "es6",
       "module": "commonjs",
       "sourceMap": true,
       "outDir": "out",
       "strict": true,
       "esModuleInterop": true,
       "experimentalDecorators": true,
       "emitDecoratorMetadata": true,
       "skipLibCheck": true,
       "forceConsistentCasingInFileNames": true
     }
}


